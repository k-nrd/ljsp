/**
* S-expression parser grammar
*
* Atom: 42, +, if, foo, "Hello World!"
*
* List: (), (+ 5 x), (print "Hello World!")
*
*/


// -------------------------------------
// Lexical grammar (tokens):

%lex

%%

\s+               /* skip whitespace */
\"[^\"]*\"        return 'STRING'
\d+               return 'NUMBER'
[\w\-+*=<>/]+     return 'SYMBOL'

/lex

// -------------------------------------
// Syntactic grammar (BNF):

%%

Exp
  : Atom
  | List
  ;

Atom 
  : NUMBER { $$ = Number($1) }
  | STRING
  | SYMBOL
  ;

List
  : '(' ListEntries ')' { $$ = $2 }
  ;

ListEntries
  : ListEntries Exp { $1.push($2); $$ = $1 }
  | /* empty */ { $$ = [] }
  ;

